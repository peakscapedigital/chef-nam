---
import Layout from '../../layouts/Layout.astro';
import Card from '../../components/ui/Card.astro';
import { getPost, getRelatedPosts, getPosts, urlFor } from '../../utils/sanity';
import { PortableText } from '@portabletext/react';

export async function getStaticPaths() {
  const posts = await getPosts();
  
  return posts.map(post => ({
    params: { slug: post.slug.current },
    props: { post }
  }));
}

const { slug } = Astro.params;
const post = await getPost(slug!);

if (!post) {
  return Astro.redirect('/404');
}

// Get related posts
const relatedPosts = await getRelatedPosts(post.categories || [], post._id);

const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long', 
    day: 'numeric'
  });
};

const formatCategory = (category: string) => {
  const categoryMap: { [key: string]: string } = {
    'thai-fusion': 'Thai Fusion',
    'wedding': 'Wedding',
    'corporate': 'Corporate',
    'social': 'Social Events',
    'recipes': 'Recipes',
    'tips': 'Tips'
  };
  return categoryMap[category] || category;
};

const featuredImageUrl = post.featuredImage ? urlFor(post.featuredImage.asset).width(1200).height(600).url() : undefined;
---

<Layout 
  title={`${post.title} | Chef Nam Catering Blog`}
  description={post.excerpt}
>
  <!-- BlogPosting Structured Data -->
  <script type="application/ld+json" slot="head" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "@id": `https://chefnamcatering.com/blog/${post.slug.current}#blogposting`,
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": `https://chefnamcatering.com/blog/${post.slug.current}`
    },
    "headline": post.title,
    "description": post.excerpt,
    "image": {
      "@type": "ImageObject",
      "url": featuredImageUrl || 'https://chefnamcatering.com/favicon.png',
      "width": 1200,
      "height": 630
    },
    "author": {
      "@type": "Person",
      "@id": "https://chefnamcatering.com/#chef-nam",
      "name": "Chef Nam",
      "url": "https://chefnamcatering.com/about",
      "jobTitle": "Executive Chef & Owner",
      "worksFor": {
        "@type": "Organization",
        "name": "Chef Nam Catering"
      }
    },
    "publisher": {
      "@type": "Organization",
      "@id": "https://chefnamcatering.com/#business",
      "name": "Chef Nam Catering",
      "logo": {
        "@type": "ImageObject",
        "url": "https://chefnamcatering.com/favicon.png"
      }
    },
    "datePublished": post.publishedAt,
    "dateModified": post._updatedAt || post.publishedAt,
    "url": `https://chefnamcatering.com/blog/${post.slug.current}`,
    "articleSection": "Catering",
    "keywords": post.categories?.map(cat => formatCategory(cat)).join(', ') || 'catering, Ann Arbor, events',
    "inLanguage": "en-US"
  })}></script>

  <!-- BreadcrumbList Structured Data -->
  <script type="application/ld+json" slot="head" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": [
      {
        "@type": "ListItem",
        "position": 1,
        "name": "Home",
        "item": "https://chefnamcatering.com"
      },
      {
        "@type": "ListItem",
        "position": 2,
        "name": "Blog",
        "item": "https://chefnamcatering.com/blog"
      },
      {
        "@type": "ListItem",
        "position": 3,
        "name": post.title,
        "item": `https://chefnamcatering.com/blog/${post.slug.current}`
      }
    ]
  })}></script>
  <article>
    <!-- Hero Section -->
    <section class="pt-20 pb-6">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Breadcrumb space - can be added later -->
        
        <!-- Title -->
        <h1 class="text-4xl md:text-5xl font-serif font-bold text-brand-indigo leading-tight mb-4">
          {post.title}
        </h1>
        
        <!-- Meta info -->
        <div class="mb-6">
          <div class="flex items-center gap-4 mb-4">
            <span class="text-brand-indigo/60">
              {formatDate(post.publishedAt)}
            </span>
            {post.categories?.map(category => (
              <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-brand-amber/10 text-brand-amber">
                {formatCategory(category)}
              </span>
            ))}
          </div>
          
          <!-- Social Share Buttons -->
          <div class="flex items-center gap-3">
            <span class="text-sm text-brand-indigo/60 mr-2">Share:</span>
            
            <!-- Twitter/X Share -->
            <a 
              href={`https://twitter.com/intent/tweet?url=${encodeURIComponent(Astro.url.href)}&text=${encodeURIComponent(post.title)}`}
              target="_blank"
              rel="noopener noreferrer"
              class="text-gray-600 hover:text-amber-500 transition-colors"
              aria-label="Share on Twitter"
            >
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.80l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
              </svg>
            </a>
            
            <!-- Facebook Share -->
            <a 
              onclick="shareOnFacebook()"
              href="#"
              class="text-gray-600 hover:text-amber-500 transition-colors cursor-pointer"
              aria-label="Share on Facebook"
            >
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
              </svg>
            </a>
            
            <!-- LinkedIn Share -->
            <a 
              href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(Astro.url.href)}`}
              target="_blank"
              rel="noopener noreferrer"
              class="text-gray-600 hover:text-amber-500 transition-colors"
              aria-label="Share on LinkedIn"
            >
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
              </svg>
            </a>
            
            <!-- Email Share -->
            <a 
              href={`mailto:?subject=${encodeURIComponent(post.title)}&body=${encodeURIComponent(`Check out this article: ${Astro.url.href}`)}`}
              class="text-gray-600 hover:text-amber-500 transition-colors"
              aria-label="Share via Email"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
              </svg>
            </a>
            
            <!-- Copy Link -->
            <button 
              onclick="copyToClipboard()"
              class="text-gray-600 hover:text-amber-500 transition-colors"
              aria-label="Copy link"
              id="copy-link-btn"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
              </svg>
            </button>
          </div>
        </div>
        
        <!-- Featured Image - Left aligned with max width -->
        {featuredImageUrl && (
          <div class="mb-8">
            <img 
              src={featuredImageUrl}
              alt={post.featuredImage?.alt || post.title}
              class="w-full max-w-3xl rounded-lg shadow-lg"
              loading="eager"
            />
          </div>
        )}
      </div>
    </section>

    <!-- Article Content -->
    <section class="py-6 bg-brand-white">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">

        <!-- Summary Section -->
        {post.excerpt && (
          <div class="mb-8 p-6 bg-brand-cream/30 rounded-lg border-l-4 border-brand-amber">
            <p class="text-lg leading-relaxed text-brand-indigo/80">
              <span class="font-semibold text-brand-indigo">Summary:</span> {post.excerpt}
            </p>
          </div>
        )}


        <!-- Main content -->
        <div class="prose prose-lg max-w-none prose-headings:font-serif prose-headings:text-brand-indigo prose-p:text-brand-indigo/80 prose-p:leading-relaxed prose-a:text-brand-amber hover:prose-a:text-brand-amber/80 prose-strong:text-brand-indigo prose-ul:text-brand-indigo/80 prose-ol:text-brand-indigo/80">
          <!-- Content rendering with header IDs for table of contents -->
          {(() => {
            // Group consecutive list items together
            const groupedContent: any[] = [];
            let currentList: any[] = [];
            let currentListType: string | null = null;
            
            post.content?.forEach((block: any) => {
              if (block._type === 'block' && block.listItem) {
                // This is a list item
                if (currentListType && currentListType !== block.listItem) {
                  // Different list type, push current list and start new one
                  if (currentList.length > 0) {
                    groupedContent.push({ type: 'list', listType: currentListType, items: currentList });
                    currentList = [];
                  }
                }
                currentListType = block.listItem;
                currentList.push(block);
              } else {
                // Not a list item
                if (currentList.length > 0) {
                  // Push accumulated list items
                  groupedContent.push({ type: 'list', listType: currentListType, items: currentList });
                  currentList = [];
                  currentListType = null;
                }
                // Push non-list block
                groupedContent.push(block);
              }
            });
            
            // Don't forget any remaining list items
            if (currentList.length > 0) {
              groupedContent.push({ type: 'list', listType: currentListType, items: currentList });
            }
            
            // Now render the grouped content
            return groupedContent.map((block: any, index: number) => {
              if (block.type === 'list') {
                // Render list
                const listItems = block.items.map((item: any, itemIndex: number) => {
                  // Use the same renderChildren function for list items
                  const renderChildren = (children: any[]) => {
                    return children?.map((child: any, childIdx: number) => {
                      if (child._type === 'span') {
                        let element: any = child.text;
                        
                        // Apply marks if they exist
                        if (child.marks && child.marks.length > 0) {
                          child.marks.forEach((mark: any) => {
                            if (typeof mark === 'string') {
                              // Check if it's a reference to a link in markDefs
                              const markDef = item.markDefs?.find((def: any) => def._key === mark);
                              if (markDef && markDef._type === 'link') {
                                element = (
                                  <a 
                                    key={`${itemIndex}-${childIdx}`}
                                    href={markDef.href} 
                                    class="text-brand-amber hover:text-brand-amber/80 underline transition-colors"
                                    target={markDef.href?.startsWith('http') && !markDef.href?.includes('chefnamcatering.com') ? '_blank' : undefined}
                                    rel={markDef.href?.startsWith('http') && !markDef.href?.includes('chefnamcatering.com') ? 'noopener noreferrer' : undefined}
                                  >
                                    {element}
                                  </a>
                                );
                              } else {
                                switch (mark) {
                                  case 'strong':
                                    element = <strong key={`${itemIndex}-${childIdx}`}>{element}</strong>;
                                    break;
                                  case 'em':
                                    element = <em key={`${itemIndex}-${childIdx}`}>{element}</em>;
                                    break;
                                  case 'underline':
                                    element = <u key={`${itemIndex}-${childIdx}`}>{element}</u>;
                                    break;
                                  case 'code':
                                    element = <code key={`${itemIndex}-${childIdx}`} class="px-1 py-0.5 bg-gray-100 rounded text-sm">{element}</code>;
                                    break;
                                }
                              }
                            }
                          });
                        }
                        
                        return element;
                      }
                      return child.text || '';
                    }) || [];
                  };
                  
                  const content = renderChildren(item.children);
                  return <li key={itemIndex} class="text-brand-indigo/80 leading-relaxed mb-2">{content}</li>;
                });
                
                if (block.listType === 'bullet') {
                  return <ul key={index} class="list-disc list-inside mb-6 space-y-2 ml-4">{listItems}</ul>;
                } else if (block.listType === 'number') {
                  return <ol key={index} class="list-decimal list-inside mb-6 space-y-2 ml-4">{listItems}</ol>;
                }
              } else if (block._type === 'block') {
                // Function to render children with marks (links, bold, italic, etc.)
                const renderChildren = (children: any[]) => {
                  return children?.map((child: any, childIndex: number) => {
                    // Default to just the text
                    let element: any = child.text || '';
                    
                    // Apply marks if they exist
                    if (child.marks && child.marks.length > 0) {
                      // Process marks in reverse order to properly nest elements
                      const marks = [...child.marks].reverse();
                      
                      marks.forEach((mark: any) => {
                        if (typeof mark === 'string') {
                          // Check if it's a reference to a link in markDefs
                          const markDef = block.markDefs?.find((def: any) => def._key === mark);
                          if (markDef && markDef._type === 'link') {
                            element = (
                              <a 
                                key={`${childIndex}-link`}
                                href={markDef.href} 
                                class="text-brand-amber hover:text-brand-amber/80 underline transition-colors"
                                target={markDef.href?.startsWith('http') && !markDef.href?.includes('chefnamcatering.com') ? '_blank' : undefined}
                                rel={markDef.href?.startsWith('http') && !markDef.href?.includes('chefnamcatering.com') ? 'noopener noreferrer' : undefined}
                              >
                                {element}
                              </a>
                            );
                          } else {
                            // Simple text formatting marks
                            switch (mark) {
                              case 'strong':
                                element = <strong key={`${childIndex}-strong`}>{element}</strong>;
                                break;
                              case 'em':
                                element = <em key={`${childIndex}-em`}>{element}</em>;
                                break;
                              case 'underline':
                                element = <u key={`${childIndex}-underline`}>{element}</u>;
                                break;
                              case 'code':
                                element = <code key={`${childIndex}-code`} class="px-1 py-0.5 bg-gray-100 rounded text-sm">{element}</code>;
                                break;
                            }
                          }
                        }
                      });
                    }
                    
                    return element;
                  }) || [];
                };
                
                const content = renderChildren(block.children);
                
                if (block.style === 'h2') {
                  // Create a slug from the header text for consistent IDs
                  const headerText = block.children?.map((child: any) => child.text).join('') || '';
                  const slug = headerText
                    .toLowerCase()
                    .replace(/[^a-z0-9\s-]/g, '') // Remove special characters
                    .replace(/\s+/g, '-') // Replace spaces with hyphens
                    .replace(/-+/g, '-') // Replace multiple hyphens with single
                    .trim();
                  
                  return <h2 key={index} id={`heading-${slug}`} class="text-3xl font-serif font-bold text-brand-indigo mt-12 mb-6 scroll-mt-32">{content}</h2>;
                } else if (block.style === 'h3') {
                  return <h3 key={index} class="text-2xl font-serif font-semibold text-brand-indigo mt-10 mb-4 scroll-mt-32">{content}</h3>;
                } else if (block.style === 'h4') {
                  return <h4 key={index} class="text-xl font-serif font-semibold text-brand-indigo mt-8 mb-3 scroll-mt-32">{content}</h4>;
                } else {
                  return <p key={index} class="text-brand-indigo/80 leading-relaxed mb-6">{content}</p>;
                }
              } else if (block._type === 'image') {
              return (
                <div class="my-8">
                  <img 
                    src={urlFor(block.asset).width(800).url()}
                    alt={block.alt || ''}
                    class="w-full max-w-3xl rounded-lg"
                  />
                  {block.alt && (
                    <p class="text-sm text-brand-indigo/60 mt-2 italic">{block.alt}</p>
                  )}
                </div>
              );
            } else if (block._type === 'tableOfContents') {
              // Generate table of contents at this position
              const headers = post.content?.filter((contentBlock: any) => 
                contentBlock._type === 'block' && contentBlock.style === 'h2'
              ) || [];
              
              if (headers.length > 0) {
                const tocTitle = block.title || 'In This Article:';
                
                return (
                  <div class="mb-12 not-prose">
                    <h3 class="text-lg font-serif font-semibold text-brand-indigo mb-4">{tocTitle}</h3>
                    <div class="bg-brand-cream/30 rounded-lg border-l-4 border-brand-amber px-6 py-2">
                      <ul class="space-y-0">
                        {headers.map((header: any, headerIndex: number) => {
                          const headerText = header.children?.map((child: any) => child.text).join('') || '';
                          
                          // Create a slug from the header text
                          const slug = headerText
                            .toLowerCase()
                            .replace(/[^a-z0-9\s-]/g, '') // Remove special characters
                            .replace(/\s+/g, '-') // Replace spaces with hyphens
                            .replace(/-+/g, '-') // Replace multiple hyphens with single
                            .trim();
                          
                          const id = `heading-${slug}`;
                          
                          return (
                            <li key={headerIndex}>
                              <a 
                                href={`#${id}`}
                                class="text-brand-amber hover:text-brand-amber/80 transition-colors text-sm block py-1"
                              >
                                {headerText}
                              </a>
                            </li>
                          );
                        })}
                      </ul>
                    </div>
                  </div>
                );
              }
              
              // If no headers found, show a message
              return (
                <div class="mb-12 not-prose">
                  <div class="bg-brand-cream/30 rounded-lg border-l-4 border-brand-amber p-6">
                    <p class="text-brand-indigo/60 text-sm italic">
                      No headers found. Add H2 headers to your content to generate the table of contents.
                    </p>
                  </div>
                </div>
              );
            }
            });
          })()}
        </div>

      </div>
    </section>

    <!-- Related Posts -->
    {relatedPosts.length > 0 && (
      <section class="py-20 bg-brand-cream">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="text-center mb-12">
            <h2 class="text-3xl font-serif font-bold text-brand-indigo">
              Related Posts
            </h2>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
            {relatedPosts.map(relatedPost => (
              <Card variant="default" href={`/blog/${relatedPost.slug.current}`} class="bg-brand-white">
                {relatedPost.featuredImage ? (
                  <img 
                    src={urlFor(relatedPost.featuredImage.asset).width(400).height(250).url()}
                    alt={relatedPost.title}
                    class="w-full h-48 object-cover rounded-lg mb-4"
                    loading="lazy"
                  />
                ) : (
                  <div class="w-full h-48 bg-brand-cream rounded-lg mb-4 flex items-center justify-center">
                    <span class="text-brand-indigo/40 text-sm">Blog Post Image</span>
                  </div>
                )}
                
                <div class="flex items-center gap-3 mb-3">
                  <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-brand-amber/10 text-brand-amber">
                    {formatCategory(relatedPost.categories?.[0] || 'Blog')}
                  </span>
                  <span class="text-xs text-brand-indigo/60">
                    {formatDate(relatedPost.publishedAt)}
                  </span>
                </div>
                
                <h3 class="text-lg font-serif font-semibold text-brand-indigo mb-2 leading-tight">
                  {relatedPost.title}
                </h3>
                
                <p class="text-brand-indigo/70 text-sm leading-relaxed">
                  {relatedPost.excerpt}
                </p>
              </Card>
            ))}
          </div>
        </div>
      </section>
    )}
  </article>

  <!-- Social Share Scripts -->
  <script>
    function shareOnFacebook() {
      const url = window.location.href;
      const title = document.querySelector('h1').textContent;
      
      // Debug: log what we're trying to share
      console.log('Sharing URL:', url);
      console.log('Sharing Title:', title);
      
      // For localhost, Facebook won't load the URL preview, but the link should still work in production
      if (url.includes('localhost')) {
        alert(`Facebook sharing works in production. \n\nDevelopment URL: ${url}\nTitle: ${title}\n\nIn production, Facebook will load the URL preview properly.`);
        return;
      }
      
      // Production Facebook share
      const fbUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(title)}`;
      window.open(fbUrl, 'facebook-share', 'width=580,height=400');
    }
    
    function copyToClipboard() {
      const url = window.location.href;
      navigator.clipboard.writeText(url).then(() => {
        const btn = document.getElementById('copy-link-btn');
        const originalSvg = btn.innerHTML;
        
        // Show checkmark feedback
        btn.innerHTML = `
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
          </svg>
        `;
        
        // Reset after 2 seconds
        setTimeout(() => {
          btn.innerHTML = originalSvg;
        }, 2000);
      }).catch(err => {
        console.error('Failed to copy: ', err);
      });
    }
  </script>
</Layout>