---
import Card from '../ui/Card.astro';
import { Icon } from 'astro-icon/components';

export interface Props {
  testimonials?: Array<{
    quote: string;
    author: string;
    event: string;
    rating: number;
    platform?: string;
  }>;
}

const { testimonials = [
  {
    quote: "Chef Nam's catering made our wedding absolutely perfect. The food was incredible and the service was flawless. Our guests are still talking about the amazing flavors!",
    author: "Sarah & Mike Johnson",
    event: "Wedding Reception",
    rating: 5,
    platform: "google"
  },
  {
    quote: "Professional, delicious, and beautifully presented. Chef Nam understood exactly what we needed for our corporate event. Highly recommend!",
    author: "David Chen", 
    event: "Corporate Event",
    rating: 5,
    platform: "yelp"
  }
] } = Astro.props;
---

<section class="relative py-20 overflow-hidden">
  <!-- Background Image -->
  <div class="absolute inset-0 z-0">
    <img 
      src="https://images.unsplash.com/photo-1414235077428-338989a2e8c0?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&q=80" 
      alt="Beautiful catered event setup" 
      class="w-full h-full object-cover"
      loading="lazy"
    />
    <!-- Indigo overlay for brand consistency -->
    <div class="absolute inset-0" style="background: linear-gradient(135deg, rgba(44, 62, 80, 0.85), rgba(44, 62, 80, 0.75))"></div>
  </div>
  
  <!-- Content -->
  <div class="relative z-10 max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-16">
      <h2 class="text-4xl md:text-5xl font-serif font-bold text-white mb-6">
        Rave Reviews From Satisfied Clients
      </h2>
      <p class="text-xl text-white/90 max-w-3xl mx-auto">
        Real experiences from real celebrations across Ann Arbor and Southeast Michigan
      </p>
    </div>
    
    <!-- Testimonials Carousel Container -->
    <div class="relative">
      <!-- Navigation Arrows -->
      <button 
        id="prevTestimonial" 
        class="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-4 z-10 w-12 h-12 bg-white/20 hover:bg-white/30 backdrop-blur-md border border-white/30 rounded-full flex items-center justify-center transition-all duration-300 group"
        aria-label="Previous testimonial"
      >
        <Icon name="mdi:chevron-left" class="w-6 h-6 text-white group-hover:text-brand-amber transition-colors" />
      </button>
      
      <button 
        id="nextTestimonial" 
        class="absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 z-10 w-12 h-12 bg-white/20 hover:bg-white/30 backdrop-blur-md border border-white/30 rounded-full flex items-center justify-center transition-all duration-300 group"
        aria-label="Next testimonial"
      >
        <Icon name="mdi:chevron-right" class="w-6 h-6 text-white group-hover:text-brand-amber transition-colors" />
      </button>

      <!-- Testimonials Container -->
      <div class="overflow-hidden">
        <div id="testimonialsTrack" class="flex transition-transform duration-500 ease-in-out">
          {testimonials && testimonials.map((testimonial, index) => (
            <div class="w-full md:w-1/2 lg:w-1/3 flex-shrink-0 px-4">
              <div class="backdrop-blur-md bg-white/10 border border-white/20 rounded-xl p-8 shadow-xl hover:bg-white/15 transition-all duration-300 h-full">
                <!-- Review Platform Logo -->
                <div class="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-6">
                  {testimonial.platform === 'google' ? (
                    <Icon name="mdi:google" class="w-8 h-8 text-white" />
                  ) : testimonial.platform === 'yelp' ? (
                    <Icon name="mdi:yelp" class="w-8 h-8 text-white" />
                  ) : (
                    <Icon name="mdi:star-circle" class="w-8 h-8 text-white/80" />
                  )}
                </div>
                
                <!-- Star rating -->
                <div class="flex justify-center mb-6">
                  {Array.from({ length: testimonial.rating }, () => (
                    <Icon name="mdi:star" class="w-5 h-5 text-brand-amber" />
                  ))}
                </div>
                
                <!-- Testimonial quote -->
                <blockquote class="text-white/95 mb-6 leading-relaxed italic text-center">
                  "{testimonial.quote}"
                </blockquote>
                
                <!-- Author info -->
                <div class="text-center">
                  <cite class="font-semibold text-white not-italic">{testimonial.author}</cite>
                  <p class="text-white/70 text-sm mt-1">{testimonial.event}</p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Pagination Dots -->
      <div class="flex justify-center mt-8 space-x-2">
        {testimonials && testimonials.map((_, index) => (
          <button 
            class="w-11 h-11 rounded-full bg-transparent hover:bg-white/10 transition-colors pagination-dot flex items-center justify-center"
            data-index={index}
            aria-label={`Go to testimonial ${index + 1}`}
          >
            <span class="w-3 h-3 rounded-full bg-white/30 hover:bg-white/50 transition-colors pointer-events-none"></span>
          </button>
        ))}
      </div>
    </div>
  </div>
</section>

<!-- Testimonials Carousel Script -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const track = document.getElementById('testimonialsTrack');
    const prevBtn = document.getElementById('prevTestimonial');
    const nextBtn = document.getElementById('nextTestimonial');
    const dots = document.querySelectorAll('.pagination-dot');
    
    if (!track || !prevBtn || !nextBtn) return;
    
    const testimonials = track.children;
    const totalTestimonials = testimonials.length;
    let currentIndex = 0;
    
    // Determine items per view based on screen size
    function getItemsPerView() {
      if (window.innerWidth >= 1024) return 3; // lg: 3 items
      if (window.innerWidth >= 768) return 2;  // md: 2 items
      return 1; // sm: 1 item
    }
    
    function updateCarousel() {
      const itemsPerView = getItemsPerView();
      const maxIndex = Math.max(0, totalTestimonials - itemsPerView);
      
      // Clamp currentIndex to valid range
      currentIndex = Math.min(currentIndex, maxIndex);
      
      const translateX = -(currentIndex * (100 / itemsPerView));
      track.style.transform = `translateX(${translateX}%)`;
      
      // Update pagination dots
      dots.forEach((dot, index) => {
        if (index === currentIndex) {
          dot.classList.add('bg-white/80');
          dot.classList.remove('bg-white/30');
        } else {
          dot.classList.add('bg-white/30');
          dot.classList.remove('bg-white/80');
        }
      });
      
      // Update button states
      prevBtn.disabled = currentIndex === 0;
      nextBtn.disabled = currentIndex >= maxIndex;
      
      if (prevBtn.disabled) {
        prevBtn.classList.add('opacity-50', 'cursor-not-allowed');
      } else {
        prevBtn.classList.remove('opacity-50', 'cursor-not-allowed');
      }
      
      if (nextBtn.disabled) {
        nextBtn.classList.add('opacity-50', 'cursor-not-allowed');
      } else {
        nextBtn.classList.remove('opacity-50', 'cursor-not-allowed');
      }
    }
    
    // Navigation functions
    function goToNext() {
      const itemsPerView = getItemsPerView();
      const maxIndex = Math.max(0, totalTestimonials - itemsPerView);
      if (currentIndex < maxIndex) {
        currentIndex++;
        updateCarousel();
      }
    }
    
    function goToPrev() {
      if (currentIndex > 0) {
        currentIndex--;
        updateCarousel();
      }
    }
    
    function goToIndex(index) {
      const itemsPerView = getItemsPerView();
      const maxIndex = Math.max(0, totalTestimonials - itemsPerView);
      currentIndex = Math.min(index, maxIndex);
      updateCarousel();
    }
    
    // Event listeners
    nextBtn.addEventListener('click', goToNext);
    prevBtn.addEventListener('click', goToPrev);
    
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => goToIndex(index));
    });
    
    // Handle window resize
    window.addEventListener('resize', updateCarousel);
    
    // Initialize
    updateCarousel();
  });
</script>